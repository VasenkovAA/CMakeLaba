#include <iostream>
//#include <iterator>
using namespace std;
template <typename T>
class TVector;


template<typename T>
class InIterator:public std::iterator<std::input_iterator_tag, T>{
    
    private:
    T *it;
    InIterator(T* p){it = *p;};
    public:
    InIterator(const InIterator&tmp){it = tmp.it;};
    bool operator++(){
        ++it;
        return this;
    };
    bool operator==(InIterator const &tmp){return (it == tmp);};
    bool operator!=(InIterator const &tmp){return (it != tmp);};
    T& operator* (){return *it;};
    
};











template <typename T>
class TVector {
public:
 
    TVector() : m_size(0), m_capacity(0), m_data(nullptr), m_begin(nullptr), m_end(nullptr) {}
    TVector(size_t size) : m_size(size), m_capacity(size), m_data(new T[size]), m_begin(m_data), m_end(m_data + size) {}
    TVector(size_t size, const T& value) : m_size(size), m_capacity(size), m_data(new T[size]), m_begin(m_data), m_end(m_data + size) {
        for (size_t i = 0; i < size; i++) {
            m_data[i] = value;
        }
    }
    TVector(const TVector<T>& other) : m_size(other.m_size), m_capacity(other.m_capacity), m_data(new T[other.m_capacity]), m_begin(m_data), m_end(m_data + other.m_size) {
        for (size_t i = 0; i < m_size; i++) {
            m_data[i] = other.m_data[i];
        }
    }
    TVector(TVector<T>&& other) noexcept : m_size(other.m_size), m_capacity(other.m_capacity), m_data(other.m_data), m_begin(other.m_begin), m_end(other.m_end) {
        other.m_size = 0;
        other.m_capacity = 0;
        other.m_data = nullptr;
        other.m_begin = nullptr;
        other.m_end = nullptr;
    }
    ~TVector() {
        delete[] m_data;
    }


    TVector<T>& operator=(const TVector<T>& other) {
        if (this != &other) {
            delete[] m_data;
            m_size = other.m_size;
            m_capacity = other.m_capacity;
            m_data = new T[m_capacity];
            m_begin = m_data;
            m_end = m_data + m_size;
            for (size_t i = 0; i < m_size; i++) {
                m_data[i] = other.m_data[i];
            }
        }
        return *this;
    }
    TVector<T>& operator=(TVector<T>&& other) noexcept {
        if (this != &other) {
            delete[] m_data;
            m_size = other.m_size;
            m_capacity = other.m_capacity;
            m_data = other.m_data;
            m_begin = other.m_begin;
            m_end = other.m_end;
            other.m_size = 0;
            other.m_capacity = 0;
            other.m_data = nullptr;
            other.m_begin = nullptr;
            other.m_end = nullptr;
        }
        return *this;
    }

    T& operator[](size_t index) {
        return m_data[index];
    }
    const T& operator[](size_t index) const {
        return m_data[index];
    }
    T& at(size_t index) {
        if (index >= m_size) {
            throw std::out_of_range("Index out of range");
        }
        return m_data[index];
    }
    const T& at(size_t index) const {
        if (index >= m_size) {
            throw std::out_of_range("Index out of range");
        }
        return m_data[index];
    }
    T& front() {
        return m_data[0];
    }
    const T& front() const {
        return m_data[0];
    }
    T& back() {
        return m_data[m_size - 1];
    }
    const T& back() const {
        return m_data[m_size - 1];
    }

    bool empty() const {
        return m_size == 0;
    }
    size_t size() const {
        return m_size;
    }
    size_t capacity() const {
        return m_capacity;
    }
    void reserve(size_t new_capacity) {
        if (new_capacity > m_capacity) {
            T* new_data = new T[new_capacity];
            for (size_t i = 0; i < m_size; i++) {
                new_data[i] = m_data[i];
            }
            delete[] m_data;
            m_data = new_data;
            m_capacity = new_capacity;
            m_begin = m_data;
            m_end = m_data + m_size;
        }
    }
    void shrink_to_fit() {
        if (m_size < m_capacity) {
            T* new_data = new T[m_size];
            for (size_t i = 0; i < m_size; i++) {
                new_data[i] = m_data[i];
            }
            delete[] m_data;
            m_data = new_data;
            m_capacity = m_size;
            m_begin = m_data;
            m_end = m_data + m_size;
        }
    }

    void clear() {
        delete[] m_data;
        m_size = 0;
        m_capacity = 0;
        m_data = nullptr;
        m_begin = nullptr;
        m_end = nullptr;
    }
    void push_back(const T& value) {
        if (m_size == m_capacity) {
            reserve(m_capacity == 0 ? 1 : m_capacity * 2);
        }
        m_data[m_size++] = value;
        m_end = m_data + m_size;
    }
    void pop_back() {
        if (m_size > 0) {
            m_size--;
            m_end = m_data + m_size;
        }
    }
    void resize(size_t new_size) {
        if (new_size > m_capacity) {
            reserve(new_size);
        }
        for (size_t i = m_size; i < new_size; i++) {
            m_data[i] = T();
        }
        m_size = new_size;
        m_end = m_data + m_size;
    }
    void resize(size_t new_size, const T& value) {
        if (new_size > m_capacity) {
            reserve(new_size);
        }
        for (size_t i = m_size; i < new_size; i++) {
            m_data[i] = value;
        }
        m_size = new_size;
        m_end = m_data + m_size;
    }
    void swap(TVector<T>& other) {
        std::swap(m_size, other.m_size);
        std::swap(m_capacity, other.m_capacity);
        std::swap(m_data, other.m_data);
        std::swap(m_begin, other.m_begin);
        std::swap(m_end, other.m_end);
    }

    T* begin() {
        return m_begin;
    }
    const T* begin() const {
        return m_begin;
    }
    T* end() {
        return m_end;
    }
    const T* end() const {
        return m_end;
    }
    T* m_begin;
    T* m_end;
private:
    size_t m_size;
    size_t m_capacity;
    T* m_data;

};










int main()
{
    cout<<"Hello World";
TVector<int> test;
test.push_back(1);
test.push_back(1);
test.push_back(5);
test.push_back(6);test.push_back(1);
test.push_back(1);
test.push_back(10);
test.push_back(1);
for (auto i = test.begin(); i!=test.m_end;++i ){
    
    cout<<*i<<endl;
    
};




//cout<<test<<endl;
    return 0;
}
